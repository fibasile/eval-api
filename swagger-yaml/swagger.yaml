---
swagger: "2.0"
info:
  description: "This is a backoffice for the platform used to run Academany"
  version: "1.0.0"
  title: "Academany Management Platform"
host: "virtserver.swaggerhub.com"
basePath: "/fibasile/nueval/1.0.0"
tags:
- name: "courses"
  description: "Course management operations"
- name: "misc"
  description: "Utility functions"
schemes:
- "https"
security:
- password:
  - "read"
  - "write"
paths:
  /courses:
    get:
      tags:
      - "courses"
      summary: "List courses"
      description: "This method returns an array of Course objects"
      operationId: "getCourses"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/course"
    post:
      tags:
      - "courses"
      summary: "Create a new course"
      description: "A new Course is created based on the provided parameters"
      operationId: "createCourse"
      parameters:
      - in: "body"
        name: "course"
        description: "A dictionary containing course properties"
        required: false
        schema:
          $ref: "#/definitions/course"
      responses:
        200:
          description: "OK"
        501:
          description: "Missing a key parameter"
  /courses/{id}:
    get:
      tags:
      - "courses"
      summary: "Read a course by ID"
      operationId: "getCourse"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
    post:
      tags:
      - "courses"
      summary: "Update a course by ID"
      operationId: "updateCourse"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - in: "body"
        name: "course"
        description: "Course properties"
        required: false
        schema:
          $ref: "#/definitions/course"
      responses:
        200:
          description: "OK"
    delete:
      tags:
      - "courses"
      summary: "Delete a course by ID"
      operationId: "deleteCourse"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
  /courses/{id}/supernodes:
    get:
      tags:
      - "courses"
      summary: "List supernodes defined for a course"
      description: "This method returns an array of Supernode objects"
      operationId: "getCourseSupernodes"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/supernode"
    post:
      tags:
      - "courses"
      summary: "Create a new supernode for a course"
      description: "This method adds a supernode"
      operationId: "addSupernodeToCourse"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - in: "body"
        name: "supernode"
        description: "Supernode's properties"
        required: false
        schema:
          $ref: "#/definitions/supernode"
      responses:
        200:
          description: "OK"
  /courses/{id}/supernodes/{node_id}:
    get:
      summary: "Get a supernode by ID"
      description: "This method returns a Supernode object"
      operationId: "getCourseSupernode"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "node_id"
        in: "path"
        description: "Supernode ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
  /courses/{id}/labs:
    get:
      tags:
      - "courses"
      summary: "List labs enrolled to a course"
      description: "This method returns an array of Lab objects"
      operationId: "getCourseLabs"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/lab"
    post:
      tags:
      - "courses"
      summary: "Create and enroll a new lab to a course"
      description: "This method adds a lab to the ones following a course"
      operationId: "addLabToCourse"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - in: "body"
        name: "lab"
        description: "Lab properties"
        required: false
        schema:
          $ref: "#/definitions/lab"
      responses:
        200:
          description: "OK"
  /courses/{id}/labs/{lab_id}:
    get:
      tags:
      - "courses"
      summary: "Read a lab by ID"
      description: "This method returns a Lab object"
      operationId: "getCourseLab"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "lab_id"
        in: "path"
        description: "Lab ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/lab"
    post:
      tags:
      - "courses"
      summary: "Update a lab by ID"
      description: "This method allows to update a Lab object"
      operationId: "updateCourseLab"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "lab_id"
        in: "path"
        description: "Lab ID"
        required: true
        type: "integer"
      - in: "body"
        name: "lab"
        required: true
        schema:
          $ref: "#/definitions/lab"
      responses:
        200:
          description: "OK"
    delete:
      tags:
      - "courses"
      summary: "Delete a lab by ID"
      description: "This method removes a Lab object, along with all the related objects\
        \ (students, instructors, gurus, etc)"
      operationId: "deleteCourseLab"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "lab_id"
        in: "path"
        description: "Lab ID"
        required: true
        type: "integer"
      - in: "body"
        name: "lab"
        required: true
        schema:
          $ref: "#/definitions/lab"
      responses:
        200:
          description: "OK"
  /courses/{id}/labs/{lab_id}/students:
    post:
      tags:
      - "courses"
      summary: "Create a new student in a course for a lab"
      description: "This method creates a Student object"
      operationId: "createCourseStudent"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "lab_id"
        in: "path"
        description: "Lab ID"
        required: true
        type: "integer"
      - in: "body"
        name: "student"
        description: "Student properties"
        required: true
        schema:
          $ref: "#/definitions/student"
      responses:
        200:
          description: "OK"
  /courses/{id}/students/{student_id}:
    get:
      tags:
      - "courses"
      summary: "Read a student by ID"
      description: "This method returns a Student object"
      operationId: "getCourseStudent"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "student_id"
        in: "path"
        description: "Student ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/student"
    post:
      tags:
      - "courses"
      summary: "Update a student by ID"
      description: "This method allows to update a Student object"
      operationId: "updateCourseStudent"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "student_id"
        in: "path"
        description: "Student ID"
        required: true
        type: "integer"
      - in: "body"
        name: "student"
        required: true
        schema:
          $ref: "#/definitions/student"
      responses:
        200:
          description: "OK"
    delete:
      tags:
      - "courses"
      summary: "Delete a student by ID"
      description: "This method removes a Student object, along with all the related\
        \ objects (reviews, feedback, progress)"
      operationId: "deleteCourseStudent"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "student_id"
        in: "path"
        description: "Student ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
  /courses/{id}/labs/{lab_id}/instructors:
    post:
      tags:
      - "courses"
      summary: "Create a new instructor in a course for a lab"
      description: "This method creates a Instructor object"
      operationId: "createCourseInstructor"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "lab_id"
        in: "path"
        description: "Lab ID"
        required: true
        type: "integer"
      - in: "body"
        name: "instructor"
        description: "Instructor properties"
        required: true
        schema:
          $ref: "#/definitions/instructor"
      responses:
        200:
          description: "OK"
  /courses/{id}/instructors/{instructor_id}:
    get:
      tags:
      - "courses"
      summary: "Read an instructor by ID"
      description: "This method returns a Student object"
      operationId: "getCourseInstructor"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "instructor_id"
        in: "path"
        description: "Instructor ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/instructor"
    post:
      tags:
      - "courses"
      summary: "Update an instructor by ID"
      description: "This method allows to update a Student object"
      operationId: "updateCourseInstructor"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "instructor_id"
        in: "path"
        description: "Instructor ID"
        required: true
        type: "integer"
      - in: "body"
        name: "instructor"
        required: true
        schema:
          $ref: "#/definitions/instructor"
      responses:
        200:
          description: "OK"
    delete:
      tags:
      - "courses"
      summary: "Delete an instructor by ID"
      description: "This method removes a instructor object, along with all the related\
        \ objects (reviews, feedback, progress)"
      operationId: "deleteCourseInstructor"
      parameters:
      - name: "id"
        in: "path"
        description: "Course ID"
        required: true
        type: "integer"
      - name: "instructor_id"
        in: "path"
        description: "Instructor ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
  /ping:
    get:
      tags:
      - "misc"
      summary: "Server heartbeat operation"
      description: "This operation shows how to override the global security defined\
        \ above, as we want to open it up for all users."
      parameters: []
      responses:
        200:
          description: "OK"
      security: []
securityDefinitions:
  password:
    type: "oauth2"
    authorizationUrl: "http://api.example.com/api/auth/"
    flow: "implicit"
    scopes:
      write: "allows modifying resources"
      read: "allows reading resources"
definitions:
  lab:
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      country:
        type: "string"
      continent:
        type: "string"
      city:
        type: "string"
  course:
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      year:
        type: "integer"
      program:
        type: "string"
      active:
        type: "boolean"
        default: true
      students:
        type: "array"
        items:
          $ref: "#/definitions/student"
  user:
    properties:
      id:
        type: "integer"
      first_name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
  student:
    properties:
      id:
        type: "integer"
      course_id:
        type: "integer"
      user_id:
        type: "integer"
      student_id:
        type: "string"
      lab_id:
        type: "integer"
  instructor:
    properties:
      id:
        type: "integer"
      course_id:
        type: "integer"
      user_id:
        type: "integer"
      student_id:
        type: "string"
      lab_id:
        type: "integer"
  supernode:
    properties:
      id:
        type: "integer"
      name:
        type: "integer"
      labs:
        type: "array"
        items:
          $ref: "#/definitions/lab"
